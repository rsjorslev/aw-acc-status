<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>aw-acc-status</artifactId>
	<!--<version>0.0.1-SNAPSHOT</version>-->
	<version>${version.number}</version>
	<packaging>jar</packaging>

	<name>aw-acc-status</name>
	<description>AirWatch ACC Status Monitor</description>
	<profiles>
		<profile>
			<id>local</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.20.1</version>
						<extensions>true</extensions>
						<configuration>
							<!--
                            <authConfig>  or use "docker login" up front to store the credentials on the local machine.
                                <username>user</username>
                                <password>pass</password>
                            </authConfig>
                            -->
							<images>
								<image>
									<name>${docker.repository.name}:${version.number}</name>
									<alias>${project.artifactId}</alias>
									<build>
										<from>frolvlad/alpine-oraclejdk8:slim</from>
										<tags><!-- define additional tags for the image -->
											<tag>latest</tag>
										</tags>
										<assembly>
											<descriptor>assembly.xml</descriptor>
										</assembly>
										<ports>
											<port>8080</port>
										</ports>
										<cmd>
											<shell>
												java -jar /maven/${project.artifactId}-${version.number}.jar
											</shell>
										</cmd>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>build-docker-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push-docker-image-to-registry</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<version.number>${git.commit.time}.${git.commit.id.abbrev}</version.number>
		<docker.repository.name>rsjorslev/${project.artifactId}</docker.repository.name>
		<snippetsDirectory>${project.build.directory}/generated-snippets</snippetsDirectory>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
        </dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<!-- Not needed - can be re-enabled if StatusControllerExampleT class should be used
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.7.22</version>
			<scope>test</scope>
		</dependency>
		-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<groupId>org.apache.maven.plugins</groupId>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>false</skipTests>
							<includes>
								<include>**/*IT.class</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>1.5.2</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
							<sourceHighlighter>highlight.js</sourceHighlighter>
							<outputDirectory>
								${project.build.outputDirectory}/static/docs
							</outputDirectory>
							<attributes>
								<snippets>${snippetsDirectory}</snippets>
							</attributes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.outputDirectory}/static/docs
							</outputDirectory>
							<resources>
								<resource>
									<directory>
										${project.build.directory}/generated-docs
									</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyyMMdd-HHmmss</dateFormat>
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
					<!-- somehow necessary. otherwise the variables are not available in the pom -->
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
